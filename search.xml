<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo Next主题设置</title>
    <url>/posts/78cd222c/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/as480133937/article/details/100138838?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-100138838-blog-90712422.235%5Ev38%5Epc_relevant_default_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-100138838-blog-90712422.235%5Ev38%5Epc_relevant_default_base3&utm_relevant_index=5">Hexo-Next 主题博客个性化配置超详细，超全面(两万字)</a></p>
<p>前置条件</p>
<p>安装好hexo，可参考<a href="https://easyhexo.com/">Easy Hexo</a></p>
<p>主题下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>修改站点配置文件<code>_config.yml</code>，将<code>theme: landscape</code>修改为<code>theme: next</code></p>
<blockquote>
<p>下载好主题后，Hexo中会有两份<code>_config.yml</code>文件，位于站点根目录下的称为<code>站点配置文件</code>，位于主题目录下的称为<code>主题配置文件</code>，便于后文做区分</p>
</blockquote>
<p>修改语言</p>
<p>站点配置文件修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure>

<p>新建标签及分类界面</p>
<p>主题配置文件，搜索menu</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo学习</category>
      </categories>
      <tags>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo命令总结</title>
    <url>/posts/a5cd3e20/</url>
    <content><![CDATA[<p>[toc]</p>
<h3 id="hexo-init-folder"><a href="#hexo-init-folder" class="headerlink" title="hexo init [folder]"></a><strong><code>hexo init [folder]</code></strong></h3><p>Hexo初始化，[folder]-初始化的文件夹</p>
<p>初始化本地：<code>hexo init .</code></p>
<h3 id="hexo-new-layout-lt-title-gt"><a href="#hexo-new-layout-lt-title-gt" class="headerlink" title="hexo new [layout] &lt;title&gt;"></a><strong><code>hexo new [layout] &lt;title&gt;</code></strong></h3><p>新建文章或页面，[layout]-文章或页面的模板，&lt;title&gt;-表示标题</p>
<p><code>hexo new post 001</code>，新建了一个标题为001的文章</p>
<p><code>hexo new page 001</code>，新建了一个标题为001的页面</p>
<p>如果你不想在终端中新建文章或页面，可以直接在 <code>博客根目录/source/_post/</code> 目录下创建 Markdown 文件写<strong>文章</strong>。或者在 <code>博客根目录/source/</code> 目录下创建一个文件夹，然后在新文件夹里创建 <code>index.md</code> 写<strong>页面</strong>即可。</p>
<blockquote>
<p>提醒</p>
<p>当你新建页面后，页面的链接就是你页面所在的文件夹的名字。</p>
<p>例如：我在 <code>博客根目录/source/</code> 下新建了一个名为 <code>test</code> 的文件夹，然后在 <code>test</code> 文件夹下写 Markdown 文件，那么这个页面的链接就是 <code>网址/test</code> 。</p>
</blockquote>
<h3 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo server"></a><strong><code>hexo server</code></strong></h3><p>在本地查看网站</p>
<blockquote>
<p>提醒</p>
<p>如果你想要换端口号（上面的 <code>8080</code> 就是端口号），可以在终端里输入 <code>hexo s -p 端口号</code> 。</p>
</blockquote>
<h3 id="hexo-generate"><a href="#hexo-generate" class="headerlink" title="hexo generate"></a><strong><code>hexo generate</code></strong></h3><p>生成网站静态文件，生成后网页放在根目录下面的public文件夹里</p>
<h3 id="hexo-deploy"><a href="#hexo-deploy" class="headerlink" title="hexo deploy"></a><strong><code>hexo deploy</code></strong></h3><p>部署网站，把public下生成好的页面部署到指定的地方</p>
<h3 id="hexo-clean"><a href="#hexo-clean" class="headerlink" title="hexo clean"></a><strong><code>hexo clean</code></strong></h3><p>清空public文件夹</p>
<h3 id="hexo-version"><a href="#hexo-version" class="headerlink" title="hexo version"></a><strong><code>hexo version</code></strong></h3><p>输出版本号</p>
]]></content>
      <categories>
        <category>Hexo学习</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>html标签列表、css选择器</title>
    <url>/posts/761d71cb/</url>
    <content><![CDATA[<p><a href="https://www.runoob.com/tags/html-reference.html">HTML标签列表</a></p>
<p><a href="https://www.runoob.com/cssref/css-selectors.html">css选择器</a></p>
]]></content>
  </entry>
  <entry>
    <title>Typora 语法详解</title>
    <url>/posts/363fb101/</url>
    <content><![CDATA[<h1 id="Typora语法详解"><a href="#Typora语法详解" class="headerlink" title="Typora语法详解"></a>Typora语法详解</h1><p>[toc]</p>
<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p><strong>1.# [一级标题]</strong></p>
<blockquote>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></blockquote>
<p><strong>2.## [二级标题]</strong></p>
<blockquote>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote>
<p>最多到六级，也可以用Ctrl+1（2，3，……，6）来表示，Ctrl+0 表示段落</p>
<h2 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h2><p><strong>1.斜体：</strong></p>
<p>​	*文本*  </p>
<p>​	_文本_</p>
<p>​    Ctrl+i</p>
<blockquote>
<p><em>文本</em></p>
</blockquote>
<p><strong>2.粗体：</strong></p>
<p>​	**文本**</p>
<p>​	__文本__</p>
<p> Ctrl+b</p>
<blockquote>
<p><strong>文本</strong></p>
</blockquote>
<h2 id="三、线"><a href="#三、线" class="headerlink" title="三、线"></a>三、线</h2><p><strong>1.分割线</strong> </p>
<p>+++</p>
<p>***</p>
<p>-–</p>
<blockquote>
<p>+++</p>
</blockquote>
<p><strong>2.删除线</strong></p>
<p>~~文本~~</p>
<p>Alt+Shift+5</p>
<blockquote>
<p><del>文本</del></p>
</blockquote>
<p><strong>3.下划线</strong></p>
<p>&lt;u&gt;文本&lt;&#x2F;u&gt;</p>
<p>Ctrl+U</p>
<blockquote>
<p><u>文本</u></p>
</blockquote>
<h2 id="四、列表"><a href="#四、列表" class="headerlink" title="四、列表"></a>四、列表</h2><p><strong>1.无序列表</strong></p>
<p>* [文本]</p>
<p>+ [文本]</p>
<p>- [文本]</p>
<blockquote>
<ul>
<li>文本</li>
</ul>
</blockquote>
<p><strong>2.有序列表</strong></p>
<p>[数字]. [文本]</p>
<blockquote>
<ol>
<li>文本</li>
<li>文本</li>
</ol>
</blockquote>
<p>数字并不重要</p>
<p><strong>3.嵌套列表</strong></p>
<p>* 一级 （回车）</p>
<p>TAB * 二级  （回车）</p>
<p>TAB TAB * 三级</p>
<blockquote>
<ul>
<li>一级<ul>
<li>二级<ul>
<li>三级<ul>
<li>四级</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<p>按TAB进入下一级，按回车回到上一级</p>
<p><strong>4.无序列表和有序列表互相嵌套</strong></p>
<ol>
<li>一级有序</li>
<li>一级有序<ol>
<li>二级有序<ul>
<li>三级无序<ul>
<li>四级无序<ol>
<li>五级有序</li>
<li>五级有序</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="五、区块"><a href="#五、区块" class="headerlink" title="五、区块"></a>五、区块</h2><p>&gt; 文本</p>
<blockquote>
<p>文本</p>
</blockquote>
<p>区块嵌套</p>
<blockquote>
<p>1</p>
<blockquote>
<p>2</p>
<blockquote>
<p>3</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="六、代码"><a href="#六、代码" class="headerlink" title="六、代码"></a>六、代码</h2><p><strong>1.一行代码</strong> </p>
<p>`代码&#96;</p>
<blockquote>
<p><code>代码</code></p>
</blockquote>
<p><strong>2.代码段</strong></p>
<p>`&#96;&#96;</p>
<p>代码</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="七、链接"><a href="#七、链接" class="headerlink" title="七、链接"></a>七、链接</h2><p><strong>1.链接网页</strong></p>
<p>[链接文字](链接地址)   用英文括号</p>
<p>&lt;链接地址&gt;</p>
<blockquote>
<p><a href="https://www.baidu.com/">百度</a></p>
<p><a href="https://www.baidu.com/">https://www.baidu.com</a></p>
</blockquote>
<p><strong>2.链接本地文件</strong></p>
<blockquote>
<p><a href="./hello-world.md">hello-world.md</a></p>
</blockquote>
<p><strong>3.页内跳转</strong></p>
<blockquote>
<p><a href="##%E4%B8%80%E3%80%81%E6%A0%87%E9%A2%98">调转到标题</a></p>
</blockquote>
<h2 id="八、图片"><a href="#八、图片" class="headerlink" title="八、图片"></a>八、图片</h2><p><strong>1.![alt 属性文本](图片地址)</strong></p>
<blockquote>
<img src="C:\Users\吴淑敏\Pictures\1.png" alt="本地图片" style="zoom:25%;" />
</blockquote>
<p><strong>2.![alt 属性文本](图片地址 “可选标题”)</strong></p>
<blockquote>
<img src="C:\Users\吴淑敏\Pictures\1.png" alt="alt 属性文本" style="zoom:33%;" />
</blockquote>
<p><strong>3.直接粘贴复制图片</strong></p>
<img src="image/image-20230605200621280.png" alt="image-20230605200621280" style="zoom: 50%;" />

<h2 id="九、表格"><a href="#九、表格" class="headerlink" title="九、表格"></a>九、表格</h2><p><strong>1.Markdown 制作表格使用<code>|</code>来分隔不同的单元格，使用<code>-</code>来分隔表头和其他行。</strong></p>
<table>
<thead>
<tr>
<th>|表头</th>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
<blockquote>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
</blockquote>
<p><strong>2.设置对其方式</strong></p>
<table>
<thead>
<tr>
<th align="left">|左对齐</th>
<th align="right">右对齐</th>
<th align="center">中间对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
<blockquote>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">中间对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
</blockquote>
<h2 id="十、Typora与HTML"><a href="#十、Typora与HTML" class="headerlink" title="十、Typora与HTML"></a>十、Typora与HTML</h2><p><strong>1.字体颜色与大小</strong></p>
<p>&lt;font size&#x3D;3 color&#x3D;”red”&gt;字体颜色为红色，大小为3</font></p>
<p>&lt;font size&#x3D;4 color&#x3D;”blue”&gt;字体颜色为蓝色，大小为4</font></p>
<p>&lt;font size&#x3D;6 color&#x3D;”violet”&gt;字体颜色为紫罗兰，大小为6</font></p>
<blockquote>
<p><font size=3 color="red">字体颜色为红色，大小为3</font></p>
</blockquote>
<blockquote>
<p><font size=4 color="blue">字体颜色为蓝色，大小为4</font></p>
</blockquote>
<blockquote>
<p><font size=6 color="violet">字体颜色为紫罗兰，大小为6</font></p>
</blockquote>
<p><strong>2.对齐方式</strong></p>
<p>&lt;p align&#x3D;”left”&gt;左对齐</p></p>
<p>&lt;p align&#x3D;”center”&gt;中间对齐</p></p>
<p>&lt;p align&#x3D;”right”&gt;右对齐</p></p>
<blockquote>
<p align="left">左对齐</p>
<p align="center">中间对齐</p>
<p align="right">右对齐</p>
</blockquote>
<p><strong>3.插入图像</strong></p>
<p>&lt;img src&#x3D;”.&#x2F;image&#x2F;image-20230605200621280.png” &#x2F;&gt;</p>
<img src="./image/image-20230605200621280.png" style="zoom:33%;" />



<p><strong>4.改变图像大小</strong></p>
<p>&lt;img src&#x3D;”.&#x2F;image&#x2F;image-20230605200621280.png” width&#x3D;100 height&#x3D;100&#x2F;&gt;</p>
<img src="./image/image-20230605200621280.png" width=100 height=100/>

<p><strong>5.改变图片的位置</strong></p>
<p>&lt;img src&#x3D;”.&#x2F;image&#x2F;image-20230605200621280.png” width&#x3D;30 height&#x3D;30 style&#x3D;”float:left”&#x2F;&gt;图片在左边<br>&lt;img src&#x3D;”.&#x2F;image&#x2F;image-20230605200621280.png” width&#x3D;30 height&#x3D;30 style&#x3D;”float:right”&#x2F;&gt;图片在右边</p>
<p><img src="./image/image-20230605200621280.png" width=30 height=30 style="float:left"/>图片在左边<br><img src="./image/image-20230605200621280.png" width=30 height=30 style="float:right"/>图片在右边</p>
<h2 id="十一、数学公式"><a href="#十一、数学公式" class="headerlink" title="十一、数学公式"></a>十一、数学公式</h2><p><strong>打开数学公式编辑栏</strong></p>
<ul>
<li>点击“段落”—&gt;“公式块”</li>
<li>快捷键Ctrl+Shift+m</li>
<li>“$$”+回车</li>
<li>行间公式：点击“文件” –&gt; “偏好设置” –&gt; “Markdown” –&gt; “Markdown扩展语法” —&gt; 勾选 “内联公式（例：$ \LaTeX $）”</li>
</ul>
<p><strong>常用公式</strong></p>
<table>
<thead>
<tr>
<th>公式</th>
<th>Markdown</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>上标</td>
<td>x^2</td>
<td>$x^2$</td>
</tr>
<tr>
<td>下标</td>
<td>y_1</td>
<td>$y_1$</td>
</tr>
<tr>
<td>分式</td>
<td>\frac{1}{2}<br />1&#x2F;2</td>
<td>$\frac{1}{2}$<br />$1&#x2F;2$</td>
</tr>
<tr>
<td>省略号</td>
<td>\cdots</td>
<td>$\cdots$</td>
</tr>
<tr>
<td>开根号</td>
<td>\sqrt{2}</td>
<td>$\sqrt{2}$</td>
</tr>
<tr>
<td>矢量</td>
<td>\vec{a}</td>
<td>$\vec{a}$</td>
</tr>
<tr>
<td>积分</td>
<td>\int{x}dx<br />\int_{1}^{2}{x}dx</td>
<td>$\int{x}dx$<br />$\int_{1}^{2}{x}dx$</td>
</tr>
<tr>
<td>极限</td>
<td>\lim{a+b}<br />\lim_{n\rightarrow+\infty}{a+b}</td>
<td>$\lim{a+b}$<br />$\lim_{n\rightarrow+\infty}{a+b}$</td>
</tr>
<tr>
<td>累加</td>
<td>\sum{a}<br />\sum_{n&#x3D;1}^{100}{a_n}</td>
<td>$\sum{a}$<br />$\sum_{n&#x3D;1}^{100}{a_n}$</td>
</tr>
<tr>
<td>累乘</td>
<td>\prod{x}<br />\prod_{n&#x3D;1}^{99}{x_n}</td>
<td>$\prod{x}$<br />$\prod_{n&#x3D;1}^{99}{x_n}$</td>
</tr>
<tr>
<td>三角公式</td>
<td>\sin</td>
<td>$\sin$</td>
</tr>
<tr>
<td>对角函数</td>
<td>\ln2<br />\log_28<br />\lg10</td>
<td>$\ln2$<br />$\log_28$<br />$\lg10$</td>
</tr>
<tr>
<td>花括号</td>
<td>c(u)&#x3D;\begin{cases} \sqrt\frac{1}{N}，u&#x3D;0\ \sqrt\frac{2}{N}， u\neq0\end{cases}</td>
<td>$c(u)&#x3D;\begin{cases} \sqrt\frac{1}{N}，u&#x3D;0\ \sqrt\frac{2}{N}， u\neq0\end{cases}  $</td>
</tr>
<tr>
<td>空格</td>
<td>a \quad b</td>
<td>$a \quad b$</td>
</tr>
<tr>
<td>矩阵</td>
<td>a &#x3D; \left[ \matrix{  \alpha_1 &amp; test1\  \alpha_2 &amp; test2\  \alpha_3 &amp; test3  } \right]</td>
<td>$a &#x3D; \left[ \matrix{  \alpha_1 &amp; test1\  \alpha_2 &amp; test2\  \alpha_3 &amp; test3  } \right]$</td>
</tr>
</tbody></table>
<p><strong>希腊字母</strong></p>
<table>
<thead>
<tr>
<th>md</th>
<th>符号</th>
<th>md</th>
<th>符号</th>
</tr>
</thead>
<tbody><tr>
<td>\alpha</td>
<td>$\alpha$</td>
<td>\tau</td>
<td>$\tau$</td>
</tr>
<tr>
<td>\beta</td>
<td>$\beta$</td>
<td>\upsilon</td>
<td>$\upsilon$</td>
</tr>
<tr>
<td>\gamma</td>
<td>$\gamma$</td>
<td>\phi</td>
<td>$\phi$</td>
</tr>
<tr>
<td>\delta</td>
<td>$\delta$</td>
<td>\varphi</td>
<td>$\varphi$</td>
</tr>
<tr>
<td>\epsilon</td>
<td>$\epsilon$</td>
<td>\chi</td>
<td>$\chi$</td>
</tr>
<tr>
<td>\varepsilon</td>
<td>$\varepsilon$</td>
<td>\psi</td>
<td>$\psi$</td>
</tr>
<tr>
<td>\zeta</td>
<td>$\zeta$</td>
<td>\omega</td>
<td>$\omega$</td>
</tr>
<tr>
<td>\eta</td>
<td>$\eta$</td>
<td>\Omega</td>
<td>$\Omega$</td>
</tr>
<tr>
<td>\theta</td>
<td>$\theta$</td>
<td>\Psi</td>
<td>$\Psi$</td>
</tr>
<tr>
<td>\iota</td>
<td>$\iota$</td>
<td>\Phi</td>
<td>$\Phi$</td>
</tr>
<tr>
<td>\kappa</td>
<td>$\kappa$</td>
<td>\Upsilon</td>
<td>$\Upsilon$</td>
</tr>
<tr>
<td>\lambda</td>
<td>$\lambda$</td>
<td>\Sigma</td>
<td>$\Sigma$</td>
</tr>
<tr>
<td>\mu</td>
<td>$\mu$</td>
<td>\Pi</td>
<td>$\Pi$</td>
</tr>
<tr>
<td>\nu</td>
<td>$\nu$</td>
<td>\Xi</td>
<td>$\Xi$</td>
</tr>
<tr>
<td>\xi</td>
<td>$\xi$</td>
<td>\Lambda</td>
<td>$\Lambda$</td>
</tr>
<tr>
<td>\omicron</td>
<td>$\omicron$</td>
<td>\Theta</td>
<td>$\Theta$</td>
</tr>
<tr>
<td>\pi</td>
<td>$\pi$</td>
<td>\Delta</td>
<td>$\Delta$</td>
</tr>
<tr>
<td>\rho</td>
<td>$\rho$</td>
<td>\Gamma</td>
<td>$\Gamma$</td>
</tr>
<tr>
<td>\sigma</td>
<td>$\sigma$</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>md</th>
<th>符号</th>
<th>md</th>
<th>符号</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>$A$</td>
<td>K</td>
<td>$K$</td>
</tr>
<tr>
<td>B</td>
<td>$B$</td>
<td>M</td>
<td>$M$</td>
</tr>
<tr>
<td>E</td>
<td>$E$</td>
<td>N</td>
<td>$N$</td>
</tr>
<tr>
<td>Z</td>
<td>$Z$</td>
<td>O</td>
<td>$O$</td>
</tr>
<tr>
<td>H</td>
<td>$H$</td>
<td>P</td>
<td>$P$</td>
</tr>
<tr>
<td>I</td>
<td>$I$</td>
<td>T</td>
<td>$T$</td>
</tr>
<tr>
<td>X</td>
<td>$X$</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>$$<br>\lg10<br>$$<br><strong>关系运算符</strong></p>
<table>
<thead>
<tr>
<th>md</th>
<th>符号</th>
<th>md</th>
<th>符号</th>
</tr>
</thead>
<tbody><tr>
<td>\pm</td>
<td>$\pm$</td>
<td>\neq</td>
<td>$\neq$</td>
</tr>
<tr>
<td>\times</td>
<td>$\times$</td>
<td>\equiv</td>
<td>$\equiv$</td>
</tr>
<tr>
<td>\cdot</td>
<td>$\cdot$</td>
<td>\leq</td>
<td>$\leq$</td>
</tr>
<tr>
<td>\div</td>
<td>$\div$</td>
<td>\geq</td>
<td>$\geq$</td>
</tr>
</tbody></table>
<p><strong>其他特殊字符</strong></p>
<table>
<thead>
<tr>
<th>md</th>
<th>符号</th>
<th>md</th>
<th>符号</th>
</tr>
</thead>
<tbody><tr>
<td>\forall</td>
<td>$\forall$</td>
<td>\bot</td>
<td>$\bot$</td>
</tr>
<tr>
<td>\infty</td>
<td>$\infty$</td>
<td>\angle</td>
<td>$\angle$</td>
</tr>
<tr>
<td>\emptyset</td>
<td>$\emptyset$</td>
<td>\because</td>
<td>$\because$</td>
</tr>
<tr>
<td>\exists</td>
<td>$\exists$</td>
<td>\therefore</td>
<td>$\therefore$</td>
</tr>
<tr>
<td>\nabla</td>
<td>$\nabla$</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="扩展用法"><a href="#扩展用法" class="headerlink" title="扩展用法"></a>扩展用法</h2><p><strong>1.emoji表情</strong></p>
<p>:happy:    :happy:</p>
<p>:crab:    :crab:</p>
<p>:horse:     :horse:</p>
<p><strong>2.插入目录</strong></p>
<p>[toc]</p>
<p><strong>3.文本高亮</strong></p>
<p>=&#x3D;文本&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;文本&#x3D;&#x3D;</p>
<p>这个功能可在偏好设置 –&gt; Markdown扩展语法中设置。</p>
<p><strong>4.上下标</strong></p>
<p>H~2~O表示H<del>2</del>O</p>
<p>X^2^表示X^2^</p>
<p>参考文献：<a href="https://blog.csdn.net/qq_41261251/article/details/102817673?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168592792616800182137679%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=168592792616800182137679&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-102817673-null-null.142%5Ev88%5Econtrol_2,239%5Ev2%5Einsert_chatgpt&utm_term=Typora&spm=1018.2226.3001.4187">最齐的Typora使用教程</a></p>
]]></content>
      <categories>
        <category>Hexo学习</category>
      </categories>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>js APIs</title>
    <url>/posts/597e599c/</url>
    <content><![CDATA[<h3 id="Web-API基本认知"><a href="#Web-API基本认知" class="headerlink" title="Web API基本认知"></a>Web API基本认知</h3><h5 id="1、什么是DOM"><a href="#1、什么是DOM" class="headerlink" title="1、什么是DOM"></a>1、什么是DOM</h5><p>DOM是浏览器提供的一套专门用来操作网页内容的功能，开发网页内容特效和实现用户交互</p>
<h5 id="2、DOM树"><a href="#2、DOM树" class="headerlink" title="2、DOM树"></a>2、DOM树</h5><p>将 HTML 文档以树状结构直观的表现出来，我们称之为文档树或 DOM 树<br>描述网页内容关系的名词<br>作用：文档树直观的体现了标签与标签之间的关系</p>
<h5 id="3、DOM对象"><a href="#3、DOM对象" class="headerlink" title="3、DOM对象"></a>3、DOM对象</h5><ul>
<li>DOM对象：浏览器根据html标签生成的JS对象<br>所有的标签属性都可以在这个对象上面找到<br>修改这个对象的属性会自动映射到标签身上</li>
<li>DOM的核心思想<br>把网页内容当做对象来处理</li>
<li>document 对象<br>是 DOM 里提供的一个对象<br>所以它提供的属性和方法都是用来访问和操作网页内容的<br>    例：document.write()<br>网页所有内容都在document里面</li>
</ul>
<h3 id="获取DOM对象"><a href="#获取DOM对象" class="headerlink" title="获取DOM对象"></a>获取DOM对象</h3><h5 id="1、根据CSS选择器来获取DOM元素"><a href="#1、根据CSS选择器来获取DOM元素" class="headerlink" title="1、根据CSS选择器来获取DOM元素"></a>1、根据CSS选择器来获取DOM元素</h5><table>
<thead>
<tr>
<th>语法</th>
<th>参数</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>document.querySelector(‘css选择器’)</td>
<td>包含一个或多个有效的CSS选择器字符串</td>
<td>CSS选择器匹配的第一个元素,一个 HTMLElement对象。<br />如果没有匹配到，则返回null。</td>
</tr>
<tr>
<td>document.querySelectorAll(‘css选择器’)</td>
<td>包含一个或多个有效的CSS选择器字符串</td>
<td>CSS选择器匹配的NodeList（对象集合）</td>
</tr>
</tbody></table>
<p>document.querySelectorAll(‘css选择器’)得到的是一个伪数组：</p>
<ul>
<li>有长度有索引号的数组</li>
<li>但是没有 pop() push() 等数组方法</li>
<li>想要得到里面的每一个对象，则需要遍历（for）的方式获得</li>
</ul>
<blockquote>
<p><a href="https://www.runoob.com/cssref/css-selectors.html">css选择器</a>：用于选择你想要的元素的样式的模式</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>示例</th>
<th>示例说明</th>
<th>CSS</th>
</tr>
</thead>
<tbody><tr>
<td>.class</td>
<td>.intro</td>
<td>选择所有class&#x3D;”intro”的元素</td>
<td>1</td>
</tr>
<tr>
<td>#id</td>
<td>#firstname</td>
<td>选择所有id&#x3D;”firstname”的元素</td>
<td>1</td>
</tr>
<tr>
<td>*</td>
<td>*</td>
<td>选择所有元素</td>
<td>2</td>
</tr>
<tr>
<td>element</td>
<td>p</td>
<td>选择所有<p>元素</td>
<td>1</td>
</tr>
<tr>
<td>element,element</td>
<td>div,p</td>
<td>选择所有<div>元素和<p>元素</td>
<td>1</td>
</tr>
<tr>
<td>element element</td>
<td>div p</td>
<td>选择<div>元素内的所有<p>元素</td>
<td>1</td>
</tr>
<tr>
<td>element&gt;element</td>
<td>div&gt;p</td>
<td>选择所有父级是 <div> 元素的 <p> 元素</td>
<td>2</td>
</tr>
<tr>
<td>[attribute]</td>
<td>[target]</td>
<td>选择所有带有target属性元素</td>
<td>2</td>
</tr>
<tr>
<td>[attribute&#x3D;value]</td>
<td>[target&#x3D;-blank]</td>
<td>选择所有使用target&#x3D;”-blank”的元素</td>
<td>2</td>
</tr>
<tr>
<td>[attribute~&#x3D;value]</td>
<td>[title~&#x3D;flower]</td>
<td>选择标题属性包含单词”flower”的所有元素</td>
<td>2</td>
</tr>
<tr>
<td>[attribute|&#x3D;language]</td>
<td>[lang|&#x3D;en]</td>
<td>选择 lang 属性等于 en，或者以 en- 为开头的所有元素</td>
<td>2</td>
</tr>
<tr>
<td>:link</td>
<td>a:link</td>
<td>选择所有未访问链接</td>
<td>1</td>
</tr>
<tr>
<td>:visited</td>
<td>a:visited</td>
<td>选择所有访问过的链接</td>
<td>1</td>
</tr>
<tr>
<td>:active</td>
<td>a:active</td>
<td>选择活动链接</td>
<td>1</td>
</tr>
<tr>
<td>……</td>
<td>……</td>
<td>……</td>
<td>……</td>
</tr>
</tbody></table>
</blockquote>
<h5 id="2、其他获取DOM元素方法"><a href="#2、其他获取DOM元素方法" class="headerlink" title="2、其他获取DOM元素方法"></a>2、其他获取DOM元素方法</h5><table>
<thead>
<tr>
<th>语法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>document.getElementById(‘nav’)</td>
<td>根据id获取一个元素</td>
</tr>
<tr>
<td>document.getElementsByTaName(‘div’)</td>
<td>根据标签获取一类元素，获取页面所有div</td>
</tr>
<tr>
<td>document.getElementsByClassName(‘w’)</td>
<td>根据类名获取元素，获取页面所有类名为w的</td>
</tr>
</tbody></table>
<h3 id="操作元素内容"><a href="#操作元素内容" class="headerlink" title="操作元素内容"></a>操作元素内容</h3><h5 id="1、对象-innerText属性"><a href="#1、对象-innerText属性" class="headerlink" title="1、对象.innerText属性"></a>1、对象.innerText属性</h5><p>将文本内容添加&#x2F;更新到任意标签位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//获取元素</span><br><span class="line">const info = document.querySelector(&#x27;.info&#x27;) </span><br><span class="line">//获取文字内容</span><br><span class="line">console.log(info.innerText)</span><br><span class="line">//修改文字，显示纯文本，不解析标签，即不解析<span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><br><span class="line">info.innerText = &#x27;<span class="tag">&lt;<span class="name">strong</span>&gt;</span>我是一个盒子<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>&#x27; </span><br></pre></td></tr></table></figure>

<h5 id="2、对象-innerHTML属性"><a href="#2、对象-innerHTML属性" class="headerlink" title="2、对象.innerHTML属性"></a>2、对象.innerHTML属性</h5><p>会解析标签，多标签建议使用模板字符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//获取元素</span><br><span class="line">const info = document.querySelector(&#x27;.info&#x27;) </span><br><span class="line">//获取文字内容</span><br><span class="line">console.log(info.innerHTML)</span><br><span class="line">//修改文字，显示纯文本，不解析标签，即不解析<span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><br><span class="line">info.innerHTML = &#x27;<span class="tag">&lt;<span class="name">strong</span>&gt;</span>我是一个盒子<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>&#x27; </span><br></pre></td></tr></table></figure>

<h3 id="操作元素属性"><a href="#操作元素属性" class="headerlink" title="操作元素属性"></a>操作元素属性</h3><h5 id="1、操作元素常用属性"><a href="#1、操作元素常用属性" class="headerlink" title="1、操作元素常用属性"></a>1、操作元素常用属性</h5><p>对象.属性 &#x3D; 值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">const pic = document.querySelector(&#x27;img&#x27;)</span><br><span class="line">pic.src = &#x27;./images/b02.jpg&#x27;</span><br><span class="line">pic.title = &#x27;刘德华黑马演唱会&#x27;</span><br></pre></td></tr></table></figure>

<h5 id="2、操作元素样式属性"><a href="#2、操作元素样式属性" class="headerlink" title="2、操作元素样式属性"></a>2、操作元素样式属性</h5><ul>
<li><p>通过style属性操作CSS<br>对象.style.样式属性 &#x3D; 值</p>
<blockquote>
<ul>
<li>修改样式通过style属性引出</li>
<li>如果属性有-连接符，需要转换为小驼峰命名法</li>
<li>赋值的时候，需要的时候不要忘记加css单位</li>
</ul>
</blockquote>
</li>
<li><p>操作类名(className)操作CSS</p>
<blockquote>
<p>如果修改的样式比较多，直接通过style属性修改比较繁琐，我们可以通过借助于css类名的形式</p>
</blockquote>
<p>元素.className &#x3D; ‘active’</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>练习 - 修改样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.pink</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: hotpink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>随便一些文本内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取 DOM 节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">className</span> = <span class="string">&#x27;pink&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>由于class是关键字, 所以使用className去代替</li>
<li>className是使用新值换旧值, 如果需要添加一个类,需要保留之前的类名</li>
</ul>
</blockquote>
</li>
<li><p>通过classList操作类控制CSS</p>
<blockquote>
<p>为了解决className容易覆盖以前的类名，我们可以通过classList方式追加和删除类名</p>
</blockquote>
<ul>
<li>追加一个类<br>元素.classList.add(‘类名’)</li>
<li>删除一个类<br>元素.classList.remove(‘类名’)</li>
<li>切换一个类<br>元素.classList.toggle(‘类名’)</li>
</ul>
</li>
</ul>
<h5 id="3、操作表单元素属性"><a href="#3、操作表单元素属性" class="headerlink" title="3、操作表单元素属性"></a>3、操作表单元素属性</h5><p>表单很多情况，也需要修改属性，比如点击眼睛，可以看到密码，本质是把表单类型转换为文本框</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;agree&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 取值或者设置值  得到input里面的值可以用 value</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(input.value)</span></span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">value</span> = <span class="string">&#x27;小米手机&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">type</span> = <span class="string">&#x27;password&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 启用按钮</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// disabled 不可用   =  false  这样可以让按钮启用</span></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="property">disabled</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3. 勾选复选框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> checkbox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.agree&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        checkbox.<span class="property">checked</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="4、自定义属性"><a href="#4、自定义属性" class="headerlink" title="4、自定义属性"></a>4、自定义属性</h5><p>在html5中推出来了专门的<code>data-自定义属性</code><br>在标签上一律以<code>data-</code>开头<br>在DOM对象上一律以<code>dataset</code>对象方式获取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;box&quot;</span> <span class="attr">data-id</span> = <span class="string">&quot;10&quot;</span>&gt;</span>盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">dataset</span>.<span class="property">id</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>每隔一段时间需要自动执行一段代码，不需要我们手动去触发</p>
<h5 id="1、间歇函数"><a href="#1、间歇函数" class="headerlink" title="1、间歇函数"></a>1、间歇函数</h5><ul>
<li><p>开启定时器</p>
<p><code>setInterval(函数名, 间隔时间)</code></p>
<ul>
<li><p>每隔一段时间调用这个函数</p>
</li>
<li><p>间隔时间单位：毫秒</p>
</li>
<li><p>定时器返回的是一个id数字（页面中有几个定时器在开，每个定时器会有一个序号）</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function repeat() &#123;</span><br><span class="line">	console.log(&#x27;XXX&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">//每隔一秒调用repeat函数</span><br><span class="line">setInterval(repeat, 1000)</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭定时器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">let 变量名 = setInterval(函数名, 间隔时间)</span><br><span class="line">clearInterval(变量名)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>jsAPIs</tag>
      </tags>
  </entry>
  <entry>
    <title>react-native-paper</title>
    <url>/posts/30f73118/</url>
    <content><![CDATA[<p>react-native-paper</p>
<p>BottomNavigation</p>
<p>底部导航栏</p>
<p>参数</p>
<p><strong>shifting</strong></p>
<p>type:boolean</p>
<p>为true时，只有当按钮点击的时候，图片底下的标签才会显示。</p>
<p>为false时，显示所有标签。默认为false</p>
<p><img src="D:\blog\myblog\source_posts\image\emobile_2023-07-28_09-23-28.png" alt="emobile_2023-07-28_09-23-28"></p>
<p><img src="D:\blog\myblog\source_posts\image\emobile_2023-07-28_09-25-45.png" alt="emobile_2023-07-28_09-25-45"></p>
<p><strong>labeled</strong></p>
<p>type：boolean</p>
<p>是否显示底部标签</p>
<p>true-显示（默认）</p>
<p>false-不显示</p>
<p><strong>compact</strong></p>
<p>type：boolean</p>
<p>Whether tabs should be spread across the entire width.是否应该在整个宽度上传播标签。</p>
<p><strong>navigationState (required)</strong></p>
<p>type: { index: number; routes: Route[]; }</p>
<p>底部导航栏的状态应该包含以下几个参数：</p>
<p>index：a number representing the index of the active route in the routes array在路由数组中表示活动路由索引的数字</p>
<p>routes：an array containing a list of route objects used for rendering the tabs包含用于绘制选项卡的路由对象列表的数组</p>
<p>每一个路由对象应该包含以下参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>key</td>
<td>一个唯一的key证实路由的身份（必须的）</td>
</tr>
<tr>
<td>title</td>
<td>标签的标题</td>
</tr>
<tr>
<td>focusedIcon</td>
<td>作为焦点选项卡图标的图标,可以是字符串、图像源或反应组件</td>
</tr>
<tr>
<td>unfocusedIcon</td>
<td>图标用作无焦点的标签图标,可以是字符串、图像源或反应组件</td>
</tr>
<tr>
<td>color</td>
<td>底部导航栏的背景颜色</td>
</tr>
<tr>
<td>badge</td>
<td>在tab图标上显示的徽章,可以是真实的显示一个点,字符串或数字显示文本</td>
</tr>
<tr>
<td>accessibilityLabelaccessibilityLabel</td>
<td>选项卡按钮的可访问性标签</td>
</tr>
<tr>
<td>testID</td>
<td>test id for the tab button</td>
</tr>
</tbody></table>
<p>BottomNavigation是一个被控的组件，这意味着index需要通过onIndexChange返回来更新</p>
<p>onIndexChange (required)</p>
<p>Type: (index: number) &#x3D;&gt; void</p>
<p>Callback被用作选项卡的改变，接收新选项卡的索引作为参数。导航状态需要在调用时更新,否则更改就会被删除。</p>
<p>renderScene (required)</p>
<p>Type:(props: { route: Route; jumpTo: (key: string) &#x3D;&gt; void; }) &#x3D;&gt; React.ReactNode | null</p>
<p>Callback返回一个反应元素作为选项卡的页面呈现，接收包含路由的对象</p>
<p>页面是延迟渲染的，你第一次导航到该页面的时候渲染他。在第一次渲染之后，所有的页面保持渲染以保存他们的状态。</p>
<p>你需要确保你个人的路由实施一个shouldComponentUpdate去提升表现。为了使其更容易地指定组件，你可以使用SceneMap</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">renderScene = <span class="title class_">BottomNavigation</span>.<span class="title class_">SceneMap</span>(&#123;</span><br><span class="line">  <span class="attr">music</span>: <span class="title class_">MusicRoute</span>,</span><br><span class="line">  <span class="attr">albums</span>: <span class="title class_">AlbumsRoute</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>用这种方式指定组件更加容易，负责执行shouldComponentUpdate方法。每一个组件会接受当前的路由和一个jumpTo方法作为他的参数。jumpTo方法可以以编程的方式被用作导航到其他tabs</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">jumpTo</span>(<span class="string">&#x27;albums&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>renderIcon</p>
<p>Type: <code>(props: &#123; route: Route; focused: boolean; color: string; &#125;) =&gt; React.ReactNode</code></p>
<p>Callback which React Element to be used as tab label.回调,它的反应元素被用作标签标签</p>
<p>renderTouchable</p>
<p>Type: (props: TouchableProps<Route>) &#x3D;&gt; React.ReactNode</p>
<p>Callback返回一个React元素被用作这个tab的可触点。在安卓中渲染一个TouchableRipple和在IOS渲染TouchableWithoutFeedback</p>
<p>getAccessibilityLabel</p>
<p>Type: (props: { route: Route }) &#x3D;&gt; string | undefined</p>
<p>为选项卡按钮获取可访问性标签，当用户轻触标签时，将会被屏幕阅读器读取。默认情况下使用route.accessibilityLabel</p>
<p>getBadge</p>
<p>Type: (props: { route: Route }) &#x3D;&gt; boolean | number | string | undefined</p>
<p>为选项卡获取勋章，默认使用route.badge</p>
<p>getColor</p>
<p>Type: (props: { route: Route }) &#x3D;&gt; string | undefined</p>
<p>获取标签的颜色，默认使用route.color</p>
<p>getLabelText</p>
<p>Type: (props: { route: Route }) &#x3D;&gt; string | undefined</p>
<p>为选项卡获取标签文本，默认使用route.title，使用renderLabel替换标签组件</p>
<p>getLazy</p>
<p>Type: (props: { route: Route }) &#x3D;&gt; boolean | undefined</p>
<p>Default value: ({ route }: { route: Route }) &#x3D;&gt; route.lazy</p>
<p>Get lazy for the current screen. 默认为true</p>
<p>getTestID</p>
<p>Type: (props: { route: Route }) &#x3D;&gt; string | undefined</p>
<p>在测试中找到这个选项卡按钮，默认route.testID</p>
<p>onTabPress</p>
<p>Type: (props: { route: Route } &amp; TabPressEvent) &#x3D;&gt; void</p>
<p>按压时执行对应功能，接收路由，对像上下滚动的事件有用</p>
<p>activeColor</p>
<p>Type: string</p>
<p>为活动选项卡的图标和标签定制颜色</p>
<p>inactiveColor</p>
<p>Type: string</p>
<p>为不活动选项卡的图标和标签定制颜色</p>
<p>sceneAnimationEnabled</p>
<p>Type: boolean</p>
<p>Default value: false</p>
<p>在shifting模式下是否为场景转换启动了动画。默认情况下，当shifting是可行时，当tab改变时，场景交叉渐变。指定sceneAnimationEnabled为false时禁用动画</p>
<p>sceneAnimationType</p>
<p>Type: ‘opacity’ | ‘shifting’</p>
<p>Default value: ‘opacity’</p>
<p>场景动画效果，指定shifting为不同的效果，默认使用opacity</p>
<p>sceneAnimationEasing</p>
<p>Type: EasingFunction | undefined</p>
<p>The scene animation Easing</p>
<p>keyboardHidesNavigationBar</p>
<p>Type: boolean</p>
<p>Default value: Platform.OS &#x3D;&#x3D;&#x3D; ‘android’</p>
<p>当显示键盘时,底部的导航栏是否隐藏，在安卓，将windowSoftInputMode被设置为adjustResize时效果最好</p>
<p>safeAreaInsets</p>
<p>Type: { top?: number; right?: number; bottom?: number; left?: number; }</p>
<p>安全区域插入到标签栏。这可以避免元素像安卓中的导航栏和IOS中的底部安全区域。在IOS中是默认添加的，可以通过覆写改变选项</p>
<p>barStyle</p>
<p>Type: Animated.WithAnimatedValue&lt;StyleProp<ViewStyle>&gt;</p>
<p>底部标签栏的样式，你可以使用自定义背景颜色。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">barStyle=&#123;&#123; <span class="attr">backgroundColor</span>: <span class="string">&#x27;#694fad&#x27;</span> &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>labelMaxFontSizeMultiplier</p>
<p>Type: number</p>
<p>Default value: 1</p>
<p>指定标签字体可以到达的最大的可能的刻度</p>
<p>style</p>
<p>Type: <a href="https://reactnative.dev/docs/view-style-props"><code>StyleProp</code></a></p>
<p>theme</p>
<p>Type: <a href="https://callstack.github.io/react-native-paper/docs/guides/theming#theme-properties"><code>ThemeProp</code></a></p>
<p>testID</p>
<p>Type: string</p>
<p>Default value: ‘bottom-navigation’</p>
<p>TestID used for testing purposes用于测试目的的证明</p>
<p>createMaterialBottomTabNavigator</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react组件库</tag>
      </tags>
  </entry>
  <entry>
    <title>js基础语法</title>
    <url>/posts/6e47d1b5/</url>
    <content><![CDATA[<h3 id="js介绍"><a href="#js介绍" class="headerlink" title="js介绍"></a>js介绍</h3><h5 id="1、js组成"><a href="#1、js组成" class="headerlink" title="1、js组成"></a>1、js组成</h5><p><img src="D:\blog\myblog\source_posts\image\js基础语法_js结构.png" alt="image-20230627101511893"></p>
<ul>
<li><strong>ECMAScript</strong> 规定了js基础语法核心知识</li>
<li><strong>DOM</strong> 操作文档，比如对页面元素进行移动、大小、添加删除等操作</li>
<li><strong>BOM</strong> 操作浏览器，比如页面弹窗，检测窗口宽度、存储数据到浏览器等</li>
</ul>
<h5 id="2、js网站"><a href="#2、js网站" class="headerlink" title="2、js网站"></a>2、js网站</h5><p>​	<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">MDN</a></p>
<h5 id="3、js的书写位置"><a href="#3、js的书写位置" class="headerlink" title="3、js的书写位置"></a>3、js的书写位置</h5><ul>
<li><p>内部js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>外部js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>script标签中间无需写代码，否则会被忽略！</li>
</ul>
</li>
<li><p>内联js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;逗你玩~~&#x27;)&quot;</span>&gt;</span>点击我月薪过万<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="4、注释"><a href="#4、注释" class="headerlink" title="4、注释"></a>4、注释</h5><ul>
<li>单行注释</li>
</ul>
<p>​	ctrl + &#x2F;</p>
<ul>
<li>块注释</li>
</ul>
<p>​	shift + alt + A</p>
<h5 id="5、js结束符"><a href="#5、js结束符" class="headerlink" title="5、js结束符"></a>5、js结束符</h5><p>​	可写可不写</p>
<h5 id="6、输入输出语法"><a href="#6、输入输出语法" class="headerlink" title="6、输入输出语法"></a>6、输入输出语法</h5><ul>
<li><p>输出</p>
<ul>
<li><p>document.write(‘输出的内容’)</p>
<p>body中输出</p>
</li>
<li><p>alert(‘输出的内容’)</p>
<p>弹窗输出</p>
</li>
<li><p>console.log(‘输出的内容’)</p>
<p>控制台打印</p>
</li>
</ul>
</li>
<li><p>输入</p>
<ul>
<li><p>prompt(‘请输入您的姓名’)</p>
<p>显示一个对话框，对话框中包含一条文字信息，用来提示用户输入文字</p>
</li>
</ul>
</li>
<li><p>JavaScript 代码执行顺序</p>
<ul>
<li>按HTML文档流顺序执行JavaScript代码</li>
<li>alert() 和 prompt() 它们会跳过页面渲染先被执行</li>
</ul>
</li>
</ul>
<h5 id="7、字面量"><a href="#7、字面量" class="headerlink" title="7、字面量"></a>7、字面量</h5><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h5 id="1、声明变量"><a href="#1、声明变量" class="headerlink" title="1、声明变量"></a>1、声明变量</h5><ul>
<li><p>let 变量名</p>
</li>
<li><p>let与var区别</p>
<p>​	在较旧的JavaScript，使用关键字 var 来声明变量 ，而不是 let。 var 现在开发中一般不再使用它，只是我们可能再老版程序中看到它。 let 为了解决 var 的一些问题。</p>
<p>​	var 声明:</p>
<ul>
<li>可以先使用 在声明 (不合理)</li>
<li>var 声明过的变量可以重复声明(不合理)</li>
<li>比如变量提升、全局变量、没有块级作用域等等</li>
</ul>
</li>
</ul>
<h5 id="2、变量命名规则与规范"><a href="#2、变量命名规则与规范" class="headerlink" title="2、变量命名规则与规范"></a>2、变量命名规则与规范</h5><ul>
<li>不能用关键字</li>
<li>只能用下划线、字母、数字、$组成，且数字不能开头</li>
<li>字母严格区分大小写，如 Age 和 age 是不同的变量</li>
<li>起名要有意义</li>
<li>遵守小驼峰命名法</li>
</ul>
<h5 id="3、数组"><a href="#3、数组" class="headerlink" title="3、数组"></a>3、数组</h5><pre><code>let 数组名 = [数据1, 数据2, ..., 数据n]
let 数组名 = new Array(数据1, 数据2, ..., 数据n)
</code></pre>
<ul>
<li><p>数组是按顺序保存，所以每个数据都有自己的编号</p>
</li>
<li><p>计算机中的编号从0开始，所以小明的编号为0，小刚编号为1，以此类推</p>
</li>
<li><p>在数组中，数据的编号也叫索引或下标</p>
</li>
<li><p>数组可以存储<strong>任意类型</strong>的数据</p>
</li>
<li><p>数组的操作</p>
<ul>
<li><p>新增</p>
<ul>
<li><p>数组.push(元素1, 元素2, … , 元素n) </p>
<p>将一个或多个元素添加到数组的末尾，并返回该数组的新长度</p>
</li>
<li><p>数组.unshift(新增的内容) </p>
<p>将一个或多个元素添加到数组的开头，并返回该数组的新长度</p>
</li>
</ul>
</li>
<li><p>删除</p>
<ul>
<li><p>数组.pop()</p>
<p>从数组中删除最后一个元素，并返回该元素的值</p>
</li>
<li><p>数组.shift()</p>
<p>从数组中删除第一个元素，并返回该元素的值</p>
</li>
<li><p>数组.splice(start, deleteCount)</p>
<p>删除指定元素</p>
<p>start 起始位置: 指定修改的开始位置（从0计数）</p>
<p>deleteCount: 表示要移除的数组元素的个数</p>
<p>​	可选的。 如果省略则默认从指定的起始位置删除到最后</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>​	const 声明的值不能更改，而且const声明变量的时候需要里面进行初始化</p>
<p>​	但是对于引用数据类型，const声明的变量，里面存的不是值，是地址。引用数据类型可以改变对象的值，但不能改变地址。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names = []</span><br><span class="line">names = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]<span class="comment">//改了地址，是错误的</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names = []</span><br><span class="line">names[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">names[<span class="number">1</span>] = <span class="number">2</span> </span><br><span class="line">names[<span class="number">2</span>] = <span class="number">3</span><span class="comment">//没有改变地址，对同一对象里的值进行修改是可以的</span></span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>js是弱数据类型，变量到底属于那种类型，只有赋值之后，我们才能确认</p>
<h5 id="1、NaN"><a href="#1、NaN" class="headerlink" title="1、NaN"></a>1、NaN</h5><ul>
<li><p>NaN 代表一个计算错误。它是一个不正确的或者一个未定义的数学操作所得到的结果</p>
</li>
<li><p>NaN 是粘性的。任何对 NaN 的操作都会返回 NaN</p>
</li>
<li><p>NaN也是number类型的数据，代表非数字</p>
</li>
</ul>
<h5 id="2、字符类型"><a href="#2、字符类型" class="headerlink" title="2、字符类型"></a>2、字符类型</h5><ul>
<li><p>通过单引号（’’） 、双引号（””）或反引号( &#96; )包裹的数据都叫字符串，单引号和双引号没有本质上的区别，推荐使用单引号。</p>
</li>
<li><p>无论单引号或是双引号必须成对使用</p>
</li>
<li><p>单引号&#x2F;双引号可以互相嵌套，但是不以自已嵌套自已（口诀：外双内单，或者外单内双）</p>
</li>
<li><p>必要时可以使用转义符 \，输出单引号或双引号</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>含义</th>
<th>转义字符</th>
<th>含义</th>
<th>转义字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>\n</td>
<td>换行</td>
<td>\\</td>
<td>斜杠</td>
<td>\t</td>
<td>制表</td>
</tr>
<tr>
<td>\‘</td>
<td>单引号</td>
<td>\b</td>
<td>空格</td>
<td>\“</td>
<td>双引号</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="3、模板字符串"><a href="#3、模板字符串" class="headerlink" title="3、模板字符串"></a>3、模板字符串</h5><p>​	拼接字符串和变量</p>
<ul>
<li><p>&#96;&#96; (反引号)  在英文输入模式下按键盘的tab键上方那个键（1左边那个键）</p>
</li>
<li><p>内容拼接变量时，用 ${ }包住变量</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`大家好，我叫<span class="subst">$&#123;name&#125;</span>，今年<span class="subst">$&#123;age&#125;</span>岁`</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="4、null-和-undefined"><a href="#4、null-和-undefined" class="headerlink" title="4、null 和 undefined"></a>4、null 和 undefined</h5><ul>
<li>undefined</li>
</ul>
<p>​	只声明变量，不赋值的情况下，变量的默认值为 undefined</p>
<ul>
<li>null</li>
</ul>
<p>​	JavaScript 中的 null 仅仅是一个代表“无”、“空”或“值未知”的特殊值</p>
<ul>
<li>区别<ul>
<li>undefined 表示没有赋值</li>
<li>null 表示赋值了，但是内容为空</li>
</ul>
</li>
</ul>
<p>5、</p>
<h3 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h3><h5 id="1、检测数据类型"><a href="#1、检测数据类型" class="headerlink" title="1、检测数据类型"></a>1、检测数据类型</h5><ul>
<li>typeof x</li>
<li>typeof(x)</li>
</ul>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h5 id="1、隐式转换"><a href="#1、隐式转换" class="headerlink" title="1、隐式转换"></a>1、隐式转换</h5><ul>
<li>任何数据和字符串相加结果都是字符串</li>
<li>除了+以外的算术运算符 比如 - * &#x2F; 等都会把数据转成数字类型</li>
<li>+ 号作为正号解析可以转换成数字型</li>
</ul>
<h5 id="2、显示转换"><a href="#2、显示转换" class="headerlink" title="2、显示转换"></a>2、显示转换</h5><ul>
<li>转换为数字型<ul>
<li>Number(数据)<ul>
<li>如果字符串内容里有非数字，转换失败时结果为 NaN（Not a Number）即不是一个数字</li>
</ul>
</li>
<li>parseInt(数据)<ul>
<li>只保留整数</li>
</ul>
</li>
<li>parseFloat(数据)<ul>
<li>可以保留小数</li>
</ul>
</li>
</ul>
</li>
<li>转换为字符型<ul>
<li>String(数据)</li>
<li>变量.toString(进制)</li>
</ul>
</li>
</ul>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h5 id="1、赋值运算符"><a href="#1、赋值运算符" class="headerlink" title="1、赋值运算符"></a>1、赋值运算符</h5><p>+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;</p>
<h5 id="2、一元运算符"><a href="#2、一元运算符" class="headerlink" title="2、一元运算符"></a>2、一元运算符</h5><p>++、–</p>
<h5 id="3、比较运算符"><a href="#3、比较运算符" class="headerlink" title="3、比较运算符"></a>3、比较运算符</h5><p>&lt;、&gt;、&gt;&#x3D;、&lt;&#x3D;、!&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;：<code>左右两边值是否相等</code>、</p>
<p>&#x3D;&#x3D;&#x3D;：<code>值以及类型是否都相等</code></p>
<h5 id="4、逻辑运算符"><a href="#4、逻辑运算符" class="headerlink" title="4、逻辑运算符"></a>4、逻辑运算符</h5><p>&amp;&amp;、||、！</p>
<h5 id="5、运算符优先级"><a href="#5、运算符优先级" class="headerlink" title="5、运算符优先级"></a>5、运算符优先级</h5><table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>顺序</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>小括号</td>
<td>()</td>
</tr>
<tr>
<td>2</td>
<td>一元运算符</td>
<td>++、–、！</td>
</tr>
<tr>
<td>3</td>
<td>算数运算符</td>
<td>先* &#x2F; % 后 + -</td>
</tr>
<tr>
<td>4</td>
<td>关系运算符</td>
<td>&gt; &gt;&#x3D; &lt; &lt;&#x3D;</td>
</tr>
<tr>
<td>5</td>
<td>相等运算符</td>
<td>&#x3D;&#x3D; !&#x3D; === !==</td>
</tr>
<tr>
<td>6</td>
<td>逻辑运算符</td>
<td>先&amp;&amp;后II</td>
</tr>
<tr>
<td>7</td>
<td>赋值运算符</td>
<td>&#x3D;</td>
</tr>
<tr>
<td>8</td>
<td>逗号运算符</td>
<td>，</td>
</tr>
</tbody></table>
<h5 id="6、三点（…）运算符"><a href="#6、三点（…）运算符" class="headerlink" title="6、三点（…）运算符"></a>6、三点（…）运算符</h5><ul>
<li><p>扩展运算符</p>
<ul>
<li><p>函数调用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function showCoords(x, y, z) &#123;</span><br><span class="line">    console.log(`x: $&#123;x&#125;, y: $&#123;y&#125;, z: $&#123;z&#125;`);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">const coords = [2, 1.5, 3.5];</span><br><span class="line"> </span><br><span class="line">showCoords(...coords); // Prints &quot;x: 2, y: 1.5, z: 3.5&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">const boys = [&#x27;Bob&#x27;, &#x27;Charlie&#x27;];</span><br><span class="line">const girls = [&#x27;Alice&#x27;, &#x27;Diana&#x27;];</span><br><span class="line"> </span><br><span class="line">const all = [...boys, ...girls];</span><br><span class="line"> </span><br><span class="line">console.log(all); // [&quot;Bob&quot;, &quot;Charlie&quot;, &quot;Alice&quot;, &quot;Diana&quot;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">let obj1 = &#123; test: &#x27;value&#x27;, x: 10 &#125;;</span><br><span class="line">let obj2 = &#123; test: &#x27;other value&#x27;, y: 20 &#125;;</span><br><span class="line"> </span><br><span class="line">let combined = &#123; ...obj1, ...obj2 &#125;;</span><br><span class="line"> </span><br><span class="line">console.log(combined); // Object &#123; test: &quot;other value&quot;, x: 10, y: 20 &#125;</span><br></pre></td></tr></table></figure>

<p>如果两个对象中都出现一个键，则使用最后一个对象的键值对</p>
</li>
</ul>
</li>
<li><p>其余运算符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function f(a, b, ...rest) &#123;</span><br><span class="line">    // actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以在第一个参数和第二个参数后面输入任意数量的参数</p>
<ul>
<li>限制<ul>
<li>只能有一个其余参数</li>
<li>其余参数必须是最后一个</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><h5 id="1、表达式和语句"><a href="#1、表达式和语句" class="headerlink" title="1、表达式和语句"></a>1、表达式和语句</h5><h5 id="2、分支语句（与Java一致）"><a href="#2、分支语句（与Java一致）" class="headerlink" title="2、分支语句（与Java一致）"></a>2、分支语句（与Java一致）</h5><ul>
<li><p>if语句</p>
</li>
<li><p>三元运算符</p>
</li>
<li><p>switch语句</p>
</li>
</ul>
<h5 id="3、循环语句（与Java一致）"><a href="#3、循环语句（与Java一致）" class="headerlink" title="3、循环语句（与Java一致）"></a>3、循环语句（与Java一致）</h5><ul>
<li>while循环</li>
<li>for循环</li>
</ul>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h5 id="1、使用"><a href="#1、使用" class="headerlink" title="1、使用"></a>1、使用</h5><ul>
<li><p>声明</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名()&#123;</span><br><span class="line">	函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>命名规范</p>
<ul>
<li>和变量命名基本一致</li>
<li>尽量小驼峰式命名法</li>
<li>前缀应该为动词</li>
<li>命名建议：常用动词约定</li>
</ul>
</li>
<li><p>调用</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">函数名()</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="2、传参"><a href="#2、传参" class="headerlink" title="2、传参"></a>2、传参</h5><ul>
<li><p>声明</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数列表)&#123;</span><br><span class="line">	函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getSum(num1, num2)&#123;</span><br><span class="line">	document.write(num1 + num2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数默认值</p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">num1 = <span class="number">0</span>, num2 = <span class="number">0</span></span>)&#123;</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">write</span>(num1 + num2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="3、返回值"><a href="#3、返回值" class="headerlink" title="3、返回值"></a>3、返回值</h5><p>​	return</p>
<h5 id="4、作用域"><a href="#4、作用域" class="headerlink" title="4、作用域"></a>4、作用域</h5><p>​	全局变量、局部变量</p>
<p>​	如果函数内部，变量没有声明，直接赋值，也当全局变量看，但是强烈不推荐<br>​	但是有一种情况，函数内部的形参可以看做是局部变量。</p>
<ul>
<li>变量的访问原则<br>只要是代码，就至少有一个作用域<br>写在函数内部的局部作用域<br>如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域<br>访问原则：在能够访问到的情况下 先局部， 局部没有在找全局</li>
</ul>
<h5 id="5、匿名函数"><a href="#5、匿名函数" class="headerlink" title="5、匿名函数"></a>5、匿名函数</h5><ul>
<li><p>函数表达式<br>将匿名函数赋值给一个变量，并且通过变量名称进行调用 我们将这个称为函数表达式</p>
<ul>
<li><p>语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fn()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>立即执行函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">方式<span class="number">1</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>) &#125;)();</span><br><span class="line">方式<span class="number">2</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>) &#125;());</span><br></pre></td></tr></table></figure>

<p>多个立即执行函数要用 ; 隔开，要不然会报错</p>
</li>
</ul>
<h5 id="6、关于函数的其他一些细节"><a href="#6、关于函数的其他一些细节" class="headerlink" title="6、关于函数的其他一些细节"></a>6、关于函数的其他一些细节</h5><ul>
<li>两个相同的函数后面的会覆盖前面的函数</li>
<li>在Javascript中 实参的个数和形参的个数可以不一致<ul>
<li>如果形参过多 会自动填上undefined </li>
<li>如果实参过多 那么多余的实参会被忽略</li>
</ul>
</li>
<li>函数一旦碰到return就不会在往下执行了 函数的结束用return</li>
</ul>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h5 id="1、对象使用"><a href="#1、对象使用" class="headerlink" title="1、对象使用"></a>1、对象使用</h5><ul>
<li><p>声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 对象名 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> 对象名 = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>属性及方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 对象名 = &#123;</span><br><span class="line">	属性名：属性值,</span><br><span class="line">	方法名：函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">	<span class="attr">uname</span>: <span class="string">&#x27;pink老师&#x27;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">	<span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查</p>
<ul>
<li><p>对象名.属性</p>
</li>
<li><p>对象[‘属性’] 单引号和双引号都可以<br>对于多词属性或者 - 等属性，点操作就不能用了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">	<span class="string">&#x27;user-name&#x27;</span>: <span class="string">&#x27;pink老师&#x27;</span>，</span><br><span class="line">	<span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">	<span class="attr">gender</span>: 女</span><br><span class="line">&#125; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&#x27;user-name&#x27;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">user</span>-name)<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>改<br>对象名.属性 &#x3D; 新值</p>
</li>
<li><p>增<br>对象名.新属性 &#x3D; 新值<br>改和增语法一样，判断标准就是对象有没有这个属性，没有就是新增，有就是改</p>
</li>
<li><p>删<br>delete 对象名.属性</p>
</li>
<li><p>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">	<span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;hi~~&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">sayhi</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="2、遍历对象"><a href="#2、遍历对象" class="headerlink" title="2、遍历对象"></a>2、遍历对象</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">	<span class="attr">uname</span>: <span class="string">&#x27;pink老师&#x27;</span>，</span><br><span class="line">	<span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">	<span class="attr">gender</span>: 女</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(k) <span class="comment">// 打印属性名</span></span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k]) <span class="comment">// 打印属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3、内置对象"><a href="#3、内置对象" class="headerlink" title="3、内置对象"></a>3、内置对象</h5><ul>
<li>Math<br>random：生成0-1之间的随机数（包含0不包括1）<br>生成N-M之间的随机数<br>Math.floor(Math.random() * (M - N + 1)) + N<br>ceil：向上取整<br>floor：向下取整<br>max：找最大数<br>min：找最小数<br>pow：幂运算<br>abs：绝对值</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>react-native-svg-transformer</title>
    <url>/posts/f5ea99d0/</url>
    <content><![CDATA[<p>react-native-svg-transformer</p>
<p>将svg作为一个组件来使用</p>
<p>安装</p>
<p>1、下载react-native-svg依赖<br>2、下载react-native-svg-transformer依赖<br><code>yarn add --dev react-native-svg-transformer</code></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react组件库</tag>
      </tags>
  </entry>
  <entry>
    <title>react快速入门</title>
    <url>/posts/df9ce69b/</url>
    <content><![CDATA[<p><a href="https://zh-hans.react.dev/learn">reract官网-快速入门</a></p>
<h3 id="创建和嵌套组件"><a href="#创建和嵌套组件" class="headerlink" title="创建和嵌套组件"></a>创建和嵌套组件</h3><p>一个组件是UI（用户界面）的一部分，拥有自己的逻辑和外观</p>
<h5 id="1、组件的创建"><a href="#1、组件的创建" class="headerlink" title="1、组件的创建"></a>1、组件的创建</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function MyButton() &#123;</span><br><span class="line">    return (</span><br><span class="line">    	<span class="tag">&lt;<span class="name">button</span>&gt;</span>I&#x27;m a button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2、嵌套"><a href="#2、嵌套" class="headerlink" title="2、嵌套"></a>2、嵌套</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">export default function MyApp() &#123;</span><br><span class="line">  return (</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to my app<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">MyButton</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>react组件必须以大写字母开头，HTML标签必须是小写字母</li>
<li><code>export default</code>指定了主要组件</li>
</ul>
<h3 id="添加标签和样式"><a href="#添加标签和样式" class="headerlink" title="添加标签和样式"></a>添加标签和样式</h3><h5 id="1、标签"><a href="#1、标签" class="headerlink" title="1、标签"></a>1、标签</h5><p>react使用JSX为标签语法，JSX必须使用闭合标签，组件不能返回多个JSX标签，必须被包裹到一个共享的父级中，比如<code>&lt;div&gt;...&lt;/div&gt;</code>或<code>&lt;&gt;...&lt;/&gt;</code></p>
<h5 id="2、添加样式"><a href="#2、添加样式" class="headerlink" title="2、添加样式"></a>2、添加样式</h5><p>使用<code>className</code>来指定一个CSS的class</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&quot;avatar&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">/* In your CSS */</span><br><span class="line">.avatar &#123;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h3><p>使用大括号展示变量</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">return (</span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">    <span class="attr">className</span>=<span class="string">&quot;avatar&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&#123;user.imageUrl&#125;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="渲染条件和列表"><a href="#渲染条件和列表" class="headerlink" title="渲染条件和列表"></a>渲染条件和列表</h3><h5 id="1、条件渲染"><a href="#1、条件渲染" class="headerlink" title="1、条件渲染"></a>1、条件渲染</h5><ul>
<li><code>if...else</code></li>
<li>?</li>
</ul>
<h5 id="2、渲染列表"><a href="#2、渲染列表" class="headerlink" title="2、渲染列表"></a>2、渲染列表</h5><p>使用<code>map()</code>函数将一个产品数组，转换为<code>&lt;li&gt;</code>标签的元素列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">const products = [</span><br><span class="line">  &#123; title: &#x27;Cabbage&#x27;, id: 1 &#125;,</span><br><span class="line">  &#123; title: &#x27;Garlic&#x27;, id: 2 &#125;,</span><br><span class="line">  &#123; title: &#x27;Apple&#x27;, id: 3 &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const listItems = products.map(product =&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;product.id&#125;</span>&gt;</span></span><br><span class="line">    &#123;product.title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">)</span><br><span class="line">return (</span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>&lt;li&gt;</code>标签中key的作用<br>key是用于提高React组件性能所必须的标识，帮助识别哪些项已更改（添加&#x2F;删除&#x2F;重新排序）</p>
</li>
<li><p>使用索引作为key的情况<br>使用index作为key可能会产生负面影响。当索引作为key时，list的重新排序，或从list中添加或删除项可能会导致组件状态出现问题，重新排序项的索引会改变它，组件状态可能会混洗，而且会将旧key作用于不同的组件实例<br>以下情况可以考虑用索引作为key</p>
<ul>
<li>列表是静态的，不会再更改</li>
<li>列表不会被过滤（从列表中添加&#x2F;删除项目）</li>
<li>list数据中的item没有id</li>
</ul>
</li>
<li><p>key是不会自动作为prop传递给组件的</p>
</li>
</ul>
<h3 id="对事件做出响应并更新界面"><a href="#对事件做出响应并更新界面" class="headerlink" title="对事件做出响应并更新界面"></a>对事件做出响应并更新界面</h3><h5 id="1、响应事件"><a href="#1、响应事件" class="headerlink" title="1、响应事件"></a>1、响应事件</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function MyButton() &#123;</span><br><span class="line">  function handleClick() &#123;</span><br><span class="line">    alert(&#x27;You clicked me!&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="line">      Click me</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>onClick=&#123;handleClick&#125;</code> 的结尾没有小括号！不要调用事件处理函数：你只需传递给事件即可。当用户点击按钮时，React 会调用你的事件处理函数。</p>
<h5 id="2、更新界面"><a href="#2、更新界面" class="headerlink" title="2、更新界面"></a>2、更新界面</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">import &#123; useState &#125; from &#x27;react&#x27;</span><br><span class="line">function MyButton() &#123;</span><br><span class="line">  const [count, setCount] = useState(0)</span><br><span class="line"></span><br><span class="line">  function handleClick() &#123;</span><br><span class="line">    setCount(count + 1)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="line">      Clicked &#123;count&#125; times</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>const [count, setCount] = useState(0)</code>中，声明了当前的state变量(<code>count</code>)、更新变量的函数(<code>setCount</code>)、初始值(0)</p>
<p>常用的命名规则为<code>[something, setSomething]</code></p>
<h5 id="3、Hook"><a href="#3、Hook" class="headerlink" title="3、Hook"></a>3、Hook</h5><p>以 <code>use</code> 开头的函数被称为Hook。<code>useState</code> 是 React 提供的一个内置 Hook。你可以在 <a href="https://zh-hans.react.dev/reference/react">React API 参考</a> 中找到其他内置的Hook。你也可以通过组合现有的Hook来编写属于你自己的Hook。<br>Hook比普通函数更为严格。你只能在你的组件（或其他 Hook）的顶层调用Hook。如果你想在一个条件或循环中使用 <code>useState</code>，请提取一个新的组件并在组件内部使用它。</p>
<h3 id="在组件间共享数据"><a href="#在组件间共享数据" class="headerlink" title="在组件间共享数据"></a>在组件间共享数据</h3><p>将state移动到最接近包含所有按钮的组件之中</p>
<h3 id="井字棋代码详解"><a href="#井字棋代码详解" class="headerlink" title="井字棋代码详解"></a>井字棋代码详解</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">import &#123; useState &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*Square-井字棋单个格子的组件</span><br><span class="line">*value-格子中显示的数据</span><br><span class="line">*onSquareClick-点击的响应事件</span><br><span class="line">*className=&quot;square&quot;-css样式</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">function Square(&#123; value, onSquareClick &#125;) &#123; </span><br><span class="line">  return (</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;onSquareClick&#125;</span>&gt;</span></span><br><span class="line">      &#123;value&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Board(&#123; xIsNext, squares, onPlay &#125;) &#123;</span><br><span class="line">  function handleClick(i) &#123;</span><br><span class="line">    if (calculateWinner(squares) || squares[i]) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    const nextSquares = squares.slice();</span><br><span class="line">    if (xIsNext) &#123;</span><br><span class="line">      nextSquares[i] = &#x27;X&#x27;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      nextSquares[i] = &#x27;O&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    onPlay(nextSquares);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const winner = calculateWinner(squares);</span><br><span class="line">  let status;</span><br><span class="line">  if (winner) &#123;</span><br><span class="line">    status = &#x27;Winner: &#x27; + winner;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    status = &#x27;Next player: &#x27; + (xIsNext ? &#x27;X&#x27; : &#x27;O&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    <span class="tag">&lt;&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;status&quot;</span>&gt;</span>&#123;status&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;squares[0]&#125;</span> <span class="attr">onSquareClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleClick(0)&#125; /&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;squares[1]&#125;</span> <span class="attr">onSquareClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleClick(1)&#125; /&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;squares[2]&#125;</span> <span class="attr">onSquareClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleClick(2)&#125; /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;squares[3]&#125;</span> <span class="attr">onSquareClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleClick(3)&#125; /&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;squares[4]&#125;</span> <span class="attr">onSquareClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleClick(4)&#125; /&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;squares[5]&#125;</span> <span class="attr">onSquareClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleClick(5)&#125; /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;squares[6]&#125;</span> <span class="attr">onSquareClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleClick(6)&#125; /&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;squares[7]&#125;</span> <span class="attr">onSquareClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleClick(7)&#125; /&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;squares[8]&#125;</span> <span class="attr">onSquareClick</span>=<span class="string">&#123;()</span> =&gt;</span> handleClick(8)&#125; /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function Game() &#123;</span><br><span class="line">  const [history, setHistory] = useState([Array(9).fill(null)]);</span><br><span class="line">  const [currentMove, setCurrentMove] = useState(0);</span><br><span class="line">  const xIsNext = currentMove % 2 === 0;</span><br><span class="line">  const currentSquares = history[currentMove];</span><br><span class="line"></span><br><span class="line">  function handlePlay(nextSquares) &#123;</span><br><span class="line">    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];</span><br><span class="line">    setHistory(nextHistory);</span><br><span class="line">    setCurrentMove(nextHistory.length - 1);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function jumpTo(nextMove) &#123;</span><br><span class="line">    setCurrentMove(nextMove);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const moves = history.map((squares, move) =&gt; &#123;</span><br><span class="line">    let description;</span><br><span class="line">    if (move &gt; 0) &#123;</span><br><span class="line">      description = &#x27;Go to move #&#x27; + move;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      description = &#x27;Go to game start&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return (</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;move&#125;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> jumpTo(move)&#125;&gt;&#123;description&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Board</span> <span class="attr">xIsNext</span>=<span class="string">&#123;xIsNext&#125;</span> <span class="attr">squares</span>=<span class="string">&#123;currentSquares&#125;</span> <span class="attr">onPlay</span>=<span class="string">&#123;handlePlay&#125;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;moves&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function calculateWinner(squares) &#123;</span><br><span class="line">  const lines = [</span><br><span class="line">    [0, 1, 2],</span><br><span class="line">    [3, 4, 5],</span><br><span class="line">    [6, 7, 8],</span><br><span class="line">    [0, 3, 6],</span><br><span class="line">    [1, 4, 7],</span><br><span class="line">    [2, 5, 8],</span><br><span class="line">    [0, 4, 8],</span><br><span class="line">    [2, 4, 6],</span><br><span class="line">  ];</span><br><span class="line">  for (let i = 0; i &lt; lines.length; i++) &#123;</span><br><span class="line">    const [a, b, c] = lines[i];</span><br><span class="line">    if (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;</span><br><span class="line">      return squares[a];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react基础</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是Effect</title>
    <url>/posts/8c296d1/</url>
    <content><![CDATA[<p>useEffect</p>
<h3 id="什么是Effect"><a href="#什么是Effect" class="headerlink" title="什么是Effect"></a>什么是Effect</h3><p>当组件渲染时，而不是特定事件(组件中的交互)引起的副作用</p>
<h3 id="如何编写Effect"><a href="#如何编写Effect" class="headerlink" title="如何编写Effect"></a>如何编写Effect</h3><ul>
<li><p>不添加依赖，默认每次渲染后执行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">import &#123; useEffect &#125; from &#x27;react&#x27;;</span><br><span class="line">function MyComponent() &#123;</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    // 每次渲染后都会执行此处的代码</span><br><span class="line">  &#125;);</span><br><span class="line">  return <span class="tag">&lt;<span class="name">div</span> /&gt;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每当你的组件渲染时，React 将更新屏幕，然后运行 <code>useEffect</code> 中的代码。换句话说，<code>useEffect</code> 会把这段代码放到屏幕更新渲染之后执行，而不是在渲染期间执行。在渲染期间对DOM节点进行操作是不被允许的，所以应将类似操作放到<code>useEffect</code>中去执行。</p>
<blockquote>
<p>让Effect在每次渲染后执行可能会出现死循环：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">const [count, setCount] = useState(0);</span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">setCount(count + 1);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>每次渲染结束都会执行 Effect；而更新 state 会触发重新渲染。但是新一轮渲染时又会再次执行 Effect，然后 Effect 再次更新 state……如此周而复始，从而陷入死循环。</p>
</blockquote>
</li>
<li><p>在每次挂载之后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; useEffect &#125; from &#x27;react&#x27;;</span><br><span class="line">function MyComponent() &#123;</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    // 每次挂载后都会执行此处的代码</span><br><span class="line">  &#125;,[]);</span><br><span class="line">  return &lt;div /&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在开发环境中，会连续挂载两次以提醒程序员有没有对<code>useEffect</code>进行清理，在生产环境中，只会被执行一次</p>
<ul>
<li><p>如何清理<br>添加清理函数，每次重新执行 Effect 之前，React 都会调用清理函数；组件被卸载时，也会调用清理函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; useState, useEffect &#125; from &#x27;react&#x27;;</span><br><span class="line">import &#123; createConnection &#125; from &#x27;./chat.js&#x27;;</span><br><span class="line"></span><br><span class="line">export default function ChatRoom() &#123;</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    const connection = createConnection();</span><br><span class="line">    connection.connect();</span><br><span class="line">    return () =&gt; connection.disconnect();//return后面的语句会在每次卸载或者重新执行Effect之前执行</span><br><span class="line">  &#125;, []);</span><br><span class="line">  return &lt;h1&gt;欢迎来到聊天室！&lt;/h1&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>如果想在开发环境中不被重复挂载，可以关闭<code>严格模式</code>，但是建议保留</p>
</li>
<li><p>指定值改变之后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; useState, useRef, useEffect &#125; from &#x27;react&#x27;;</span><br><span class="line"></span><br><span class="line">function VideoPlayer(&#123; src, isPlaying &#125;) &#123;</span><br><span class="line">  const ref = useRef(null);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    if (isPlaying) &#123;</span><br><span class="line">      console.log(&#x27;Calling video.play()&#x27;);</span><br><span class="line">      ref.current.play();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      console.log(&#x27;Calling video.pause()&#x27;);</span><br><span class="line">      ref.current.pause();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [isPlaying]);</span><br><span class="line"></span><br><span class="line">  return &lt;video ref=&#123;ref&#125; src=&#123;src&#125; loop playsInline /&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function App() &#123;</span><br><span class="line">  const [isPlaying, setIsPlaying] = useState(false);</span><br><span class="line">  const [text, setText] = useState(&#x27;&#x27;);</span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;input value=&#123;text&#125; onChange=&#123;e =&gt; setText(e.target.value)&#125; /&gt;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; setIsPlaying(!isPlaying)&#125;&gt;</span><br><span class="line">        &#123;isPlaying ? &#x27;Pause&#x27; : &#x27;Play&#x27;&#125;</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">      &lt;VideoPlayer</span><br><span class="line">        isPlaying=&#123;isPlaying&#125;</span><br><span class="line">        src=&quot;https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每次<code>isPlaying</code>值改变时，都会执行，多个依赖时也一样，所有依赖的值都没变才不会执行。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>effect</tag>
      </tags>
  </entry>
  <entry>
    <title>多元回归分析</title>
    <url>/posts/4ba92e57/</url>
    <content><![CDATA[<h3 id="回归分析的目的"><a href="#回归分析的目的" class="headerlink" title="回归分析的目的"></a>回归分析的目的</h3><p>1、识别重要变量</p>
<p>2、判断相关性的方向</p>
<p>3、估计权重（回归系数）</p>
<h3 id="回归分析的分类"><a href="#回归分析的分类" class="headerlink" title="回归分析的分类"></a>回归分析的分类</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">模型</th>
<th align="center">Y的特点</th>
<th align="center">例子</th>
</tr>
</thead>
<tbody><tr>
<td align="center">线性回归</td>
<td align="center">OLS、GLS（最小二乘）</td>
<td align="center">连续数值型变量</td>
<td align="center">GDP、产量、收入</td>
</tr>
<tr>
<td align="center">0-1回归</td>
<td align="center">logistic回归</td>
<td align="center">二值变量（0-1）</td>
<td align="center">是否违约、是否得病</td>
</tr>
<tr>
<td align="center">定序回归</td>
<td align="center">probit定序回归</td>
<td align="center">定序变量</td>
<td align="center">等级评定（优良差）</td>
</tr>
<tr>
<td align="center">计数回归</td>
<td align="center">泊松回归（泊松分布）</td>
<td align="center">计数变量</td>
<td align="center">每分钟车流量</td>
</tr>
<tr>
<td align="center">生存回归</td>
<td align="center">Cox等比例风险回归</td>
<td align="center">生存变量（截断数据）</td>
<td align="center">企业、产品的寿命</td>
</tr>
</tbody></table>
<h3 id="数据的分类"><a href="#数据的分类" class="headerlink" title="数据的分类"></a>数据的分类</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="left">解释</th>
<th align="left">常见建模方法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">横截面数据</td>
<td align="left">某一时点收集的不同对象的数据</td>
<td align="left">多元线性回归</td>
</tr>
<tr>
<td align="center">时间序列数据</td>
<td align="left">对同一对象在不同时间连续观察所取得的数据</td>
<td align="left">移动平均、指数平滑、ARIMA、GARCH、VAR、协积</td>
</tr>
<tr>
<td align="center">面板数据</td>
<td align="left">横截面数据与时间序列数据综合起来的一种数据资源</td>
<td align="left">固定效应和随机效应、静态面板和动态面板</td>
</tr>
</tbody></table>
<h3 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h3><p>1、知乎搜索“数据查找”获取最新的网站</p>
<p>2、<a href="https://bbs.pinggu.org/">人大经济论坛</a></p>
<p>3、爬虫（python&#x2F;八爪鱼)</p>
<h3 id="一元线性回归模型"><a href="#一元线性回归模型" class="headerlink" title="一元线性回归模型"></a>一元线性回归模型</h3><hr>
<p>公式</p>
<hr>
<p>确定B，使得u最小，即每个真实值与预测值距离的平方和最小</p>
<p><em>线性的转换</em>（什么时候取对数）</p>
<p>模型的概念</p>
<p>模型的求解</p>
<p>回归系数的解释</p>
<h3 id="内生性"><a href="#内生性" class="headerlink" title="内生性"></a>内生性</h3><p>误差项u与其他自变量x存在相关性，就会存在内生性，内生性会导致回归系数估计的不准确：不满足无偏和一致性</p>
<h3 id="蒙特卡罗模拟"><a href="#蒙特卡罗模拟" class="headerlink" title="蒙特卡罗模拟"></a>蒙特卡罗模拟</h3><p>参考<a href="https://zhuanlan.zhihu.com/p/262263040">5分钟看懂蒙特卡洛模拟 - 知乎 (zhihu.com)</a></p>
<p>通过对自变量x的所有可能的取值进行多次模拟，得出对应的因变量y，并计算y出现的概率，以项目进度为例<br>项目经理对项目三个阶段（计划、编码、测试）在不同情况（最乐观、最可能、最悲观）下可能的项目成本做出了一个估计：（单位：万RMB）</p>
<table>
<thead>
<tr>
<th></th>
<th>最乐观</th>
<th>最可能</th>
<th>最悲观</th>
</tr>
</thead>
<tbody><tr>
<td>计划</td>
<td>4</td>
<td>8</td>
<td>12</td>
</tr>
<tr>
<td>编码</td>
<td>7</td>
<td>12</td>
<td>18</td>
</tr>
<tr>
<td>测试</td>
<td>5</td>
<td>8</td>
<td>11</td>
</tr>
</tbody></table>
<h3 id="核心解释变量和控制变量"><a href="#核心解释变量和控制变量" class="headerlink" title="核心解释变量和控制变量"></a>核心解释变量和控制变量</h3><p>核心解释变量：我们最感兴趣的变量，因此我们特别希望得到对其系数的 一致估计（当样本容量无限增大时，收敛于待估计参数的真值 ）。<br>控制变量：我们可能对于这些变量本身并无太大兴趣；而之所以把它们也 放入回归方程，主要是为了 “控制住” 那些对被解释变量有影响的遗漏因素。<br>无内生性的要求太强，在实际应用中，可以只保证核心解释变量与u不相关即可</p>
<h3 id="四类模型回归系数的解释"><a href="#四类模型回归系数的解释" class="headerlink" title="四类模型回归系数的解释"></a>四类模型回归系数的解释</h3><p>1、一元线性回归：y&#x3D;a+bx+u，x每增加1个单位，y平均变化b个单位<br>2、双对数模型，x每增加1%，y平均变化b%<br>3、半对数模型</p>
<h3 id="特殊的自变量：虚拟变量X"><a href="#特殊的自变量：虚拟变量X" class="headerlink" title="特殊的自变量：虚拟变量X"></a>特殊的自变量：虚拟变量X</h3><p>对于类似性别、地域等定性变量，可以用数字代替，例如性别中，女为1，男为0</p>
<p><em>多重共线性</em></p>
<h3 id="利用Stata软件进行回归分析"><a href="#利用Stata软件进行回归分析" class="headerlink" title="利用Stata软件进行回归分析"></a>利用Stata软件进行回归分析</h3>]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>多元回归分析</tag>
      </tags>
  </entry>
  <entry>
    <title>转义字符</title>
    <url>/posts/ded9e3fe/</url>
    <content><![CDATA[<p>转义字符</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>含义</th>
<th>转义字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>\n</td>
<td>换行</td>
<td>\\</td>
<td>斜杠</td>
</tr>
<tr>
<td>\t</td>
<td>制表</td>
<td>\’</td>
<td>单引号</td>
</tr>
<tr>
<td>\b</td>
<td>空格</td>
<td>\“</td>
<td>双引号</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>特殊的数字：</strong></p>
<ul>
<li>Infinity：正无穷</li>
<li>-Infinity：负无穷</li>
</ul>
<p><strong>跳到指定位置</strong></p>
<p>outer: for (var i &#x3D; 0; i &lt; 10; i++) {<br>    for (var j &#x3D; 0; j &lt; 10; j++) {<br>        if (j &#x3D;&#x3D; 5) {<br>            break outer;<br>        }<br>        console.log(j);<br>    }<br>}</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
  </entry>
</search>
